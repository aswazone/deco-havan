<%-include("../../views/partials/user/header")%>
    <title>Responsive User Profile</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.24/dist/sweetalert2.all.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.24/dist/sweetalert2.min.css">
    <style>
        body {
            height: 100vh;
            background: linear-gradient(1deg, #3a6655, #9bb5ab, #3b5d50);
            font-family: 'Poppins', sans-serif;
        }

        .profile-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .sidebar {
            background-color: #fff09417;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 20px;
            max-width: 250px;
        }

        .sidebar a {
            display: block;
            padding: 10px 10px;
            color: #333;
            font-size: 18px;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .sidebar a:hover, .sidebar a.active {
            background-color: #3b5d50;
            color: #d7ffd7a9;
        }

        

        .nav-link.active {
            background-color: #3b5d50 !important;
            color: #d7ffd7a9 !important;   
        }

        .main-content {
            width: 100%;
            flex-grow: 1;
            background-color: #7ccfb930;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .profile-image-container {
            width: 120px;
            height: 120px;
            position: relative;
            margin: auto;
        }

        .profile-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
            border: 3px solid #d7ffd753;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            font-weight: bold;
            color: #333;
        }

        .form-control {
            border: 1px solid #dfffe79c !important;
            background-color:  #e2ffe94f !important;
            border-radius: 8px;
            padding: 10px;
        }

        .btn-primary {
            background-color: #ff609e;
            border: none;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #d95886;
        }

        .address-card {
            background-color: #dfffe79c;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .bg-div {
            background-color: #fff09417;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .bg-div2 {
            background-color: #edeeea52;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        div {
            font-family: 'Nunito', sans-serif;
        }

        .order-item {
            background-color: #f8f9fa9b;
            border-radius: 12px;
            padding: 20px;
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }

        .order-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        }

        .order-item img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 20px;
        }

        .order-item .order-details {
            flex-grow: 1;
        }

        .order-item h5 {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .order-item p {
            color: #6c757d;
            margin: 0;
        }

        .order-item .status {
            font-weight: bold;
            color: #28a745;
        }

        .order-item .order-actions {
            text-align: right;
        }

        .order-item .btn {
            padding: 8px 12px;
            border-radius: 8px;
            margin-top: 10px;
        }

        @media (min-width: 768px) {
            .order-actions .btn-view {
                background-color: #00264d;
                color: #ffffff;
            }
            .order-actions .btn-view:hover {
                background-color: #001a33;
            }

            .order-actions .btn-paynow {
                background-color: #005500;
                color: #ffffff;
            }
            .order-actions .btn-paynow:hover {
                background-color: #003d00;
            }

            .order-actions .btn-danger {
                background-color: #cc0000;
                color: #ffffff;
            }
            .order-actions .btn-danger:hover {
                background-color: #990000;
            }
        }


        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
            }

            .sidebar {
                max-width: 100%;
            }

            .wishlist-container .wishlist-item {
                flex-direction: column; /* Stack items vertically */
                align-items: flex-start; /* Align items to the start */
                padding: 1rem; /* Add padding for better touch interaction */
            }

            .wishlist-container .product-image img {
                width: 100%; /* Set image to full width */
                height: auto; /* Maintain aspect ratio */
                max-width: 120px; /* Limit maximum width */
            }

            .wishlist-container .product-details {
                margin-left: 0; /* Remove unnecessary margins for smaller screens */
                margin-top: 0.5rem; /* Add spacing between image and details */
            }

            .wishlist-container .d-flex.gap-2 {
                flex-direction: column; /* Stack buttons vertically */
                gap: 0.5rem; /* Reduce gap between buttons */
                width: 100%; /* Ensure buttons are responsive */
            }

            .wishlist-container .d-flex.gap-2 .btn {
                width: 100%; /* Buttons take full width for easier tapping */
            }

            .wallet-summary {
                flex-direction: column; /* Stack elements vertically */
                align-items: flex-start; /* Align items to the start */
                justify-content: center;
                text-align: left; /* Align text to the left */
                padding: 1rem; /* Add padding for better readability */
            }

            .wallet-summary h3 {
                font-size: 1.5rem; /* Adjust heading size for mobile */
                margin-bottom: 0.5rem; /* Add spacing between title and balance */
            }

            .wallet-summary .d-flex { /* Stack total balance label and amount vertically */
                gap: 0.3rem; /* Reduce gap between elements */
            }

            .wallet-summary .balance-amount {
                font-size: 1rem;
                margin: 4px 0 0 0;
            }
            .order-item {
                flex-direction: column; /* Stack content vertically */
                align-items: flex-start; /* Align items to the start */
                padding: 1rem; /* Add padding for better touch interaction */
            }

            .order-item > div {
                width: 100%; /* Ensure all child divs span the full width */
                margin-bottom: 0.5rem; /* Add spacing between sections */
            }

            .order-item h5 {
                font-size: 1rem; /* Adjust heading size for smaller screens */
                word-wrap: break-word; /* Prevent overflow for long text */
            }

            .order-item p {
                font-size: 0.9rem; /* Adjust font size for better readability */
            }

            .order-actions {
                justify-content: flex-start; /* Align buttons to the start */
                gap: 0.5rem; /* Add spacing between buttons */
                flex-wrap: wrap; /* Allow buttons to wrap to the next line if needed */
                width: 100%; /* Ensure the action buttons take the full width */
            }

            .order-actions .btn {
                flex: 1 1 auto; /* Make buttons flexible for equal width */
                font-size: 0.8rem; /* Reduce button font size */
            }

            .status {
                font-size: 0.9rem; /* Reduce font size for the status section */
            }

            .order-item .badge {
                font-size: 0.8rem; /* Adjust badge font size for mobile */
            }

            .order-actions .btn-view {
                background-color: #003153; /* Prussian Blue */
                color: white;
                border: none;
            }

            .order-actions .btn-view:hover {
                background-color: #002244; /* Darker Prussian Blue on hover */
                color: #ffffff;
            }

            /* Dark Green for the "Pay Now" button */
            .order-actions .btn-paynow {
                background-color: #006400; /* Dark Green */
                color: white;
                border: none;
            }

            .order-actions .btn-paynow:hover {
                background-color: #004f00; /* Darker Green on hover */
                color: #ffffff;
            }

            /* .main-content {
                width: 100%;
            } */
        }

        

        
    </style>
</head>
<body>


    <div class="main-content d-flex gap-3 ">
        <aside class="sidebar d-none d-md-flex flex-column gap-2">
            <a class="sidebar-link profile active text-decoration-none d-flex align-items-center gap-2" data-bs-toggle="tab" href="#profile">
                <i class="bi bi-person-circle fs-4"></i>
                <span class="fs-5">Profile</span>
            </a>
            <a class="sidebar-link text-decoration-none d-flex align-items-center gap-2" data-bs-toggle="tab" href="#orders">
                <i class="bi bi-cart fs-4"></i>
                <span class="fs-5">Orders</span>
            </a>
            <a class="sidebar-link wishlist text-decoration-none d-flex align-items-center gap-2" data-bs-toggle="tab" href="#wishlist">
                <i class="bi bi-heart fs-4"></i>
                <span class="fs-5">Wishlist</span>
            </a>
            <a class="sidebar-link text-decoration-none d-flex align-items-center gap-2" data-bs-toggle="tab" href="#wallet">
                <i class="bi bi-wallet2 fs-4"></i>
                <span class="fs-5">Wallet</span>
            </a>
            <a class="sidebar-link text-decoration-none d-flex align-items-center gap-2" data-bs-toggle="tab" href="#address">
                <i class="bi bi-geo-alt fs-4"></i>
                <span class="fs-5">Address</span>
            </a>
        </aside>
        
        <!-- Main Content with Tabs -->
        <div class="main-content">
            <nav class="nav nav-profile d-flex d-md-none nav-pills gap-1 mb-3 justify-content-between border-radius-8">
                <!-- <h4 class="text-center mb-4">My Account</h4> -->
                <a class="nav-link profile active" data-bs-toggle="pill" href="#profile"><i class="bi bi-person-circle"></i></a>
                <a class="nav-link" data-bs-toggle="pill" href="#orders"><i class="bi bi-cart"></i></a>
                <a class="nav-link wishlist" data-bs-toggle="pill" href="#wishlist"><i class="bi bi-heart"></i></a>
                <a class="nav-link" data-bs-toggle="pill" href="#wallet"><i class="bi bi-wallet2"></i></a>
                <a class="nav-link" data-bs-toggle="pill" href="#address"><i class="bi bi-geo-alt"></i></a>
            </nav>
            <hr class="d-md-none" style="color: #044626; font-size: medium;">
            <div class="tab-content">
                <!-- Profile Section -->
                <div class="tab-pane fade show active" id="profile">
                    <h3 class="mb-2 bg-div">Profile Details</h3>
                    <!-- Profile details here -->
                    <div class="row align-items-center mb-4">
                        <div class="col-md-4 text-center">
                            <div class="profile-image-container">
                                <img src="https://upload.wikimedia.org/wikipedia/commons/9/93/Google_Contacts_icon.svg" alt="User Profile" class="profile-image" style="filter: grayscale(50%);">
                            </div>
                        </div>
                        <div class="col-md-8">
                            <form id="userDetailsForm">
                                <div class="mb-3">
                                    <label for="username" class="form-label">Username</label>
                                    <input type="text" id="username" class="form-control" value="<%= userData.name %>" readonly>
                                </div>
                                <div class="mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <div class="input-group">
                                        <input type="email" id="email" class="form-control" value="<%= userData.email %>" readonly>
                                        
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" id="phone" class="form-control" value="+91 <%= userData.phone %>" readonly>
                                </div>
                                <div class="mb-3">
                                    <a class="btn btn-primary" style="background-color: #3b5d50;" type="button" id="changeEmailBtn" data-bs-toggle="modal" data-bs-target="#verifyEmailModal">Change Password</a>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
        
                <!-- Orders Section -->
                <div class="tab-pane fade" id="orders">
                    <h3 class="mb-4 bg-div">My Orders</h3>
                
                    <!-- Loop through each order and display order details dynamically -->
                    <% if (orders && orders.length > 0) { %>
                        <% orders.forEach(order => { %>
                            <div class="order-item d-flex justify-content-between align-items-center p-2 mb-2 shadow-sm bg-div2 rounded">
                                <div>
                                    <h5 class="mb-1 text-dark">Order #<%= order.orderId %></h5>
                                    
                                    <p class="mb-0"><strong>Product:</strong> 
                                        <% order.orderItems.forEach(item => { %>
                                            <span><%= item.product?.productName %></span><% if(order.orderItems.indexOf(item) !== order.orderItems.length - 1) { %>, <% } %>
                                        <% }) %>
                                    </p>
                                    <p class="mb-0"><strong>Date:</strong> <%= new Date(order.invoiceDate).toLocaleDateString() %></p>
                                    <p class="mb-1 text-success"><strong>Total:</strong> ₹ <%= order.finalAmount.toFixed(2) %></p>
                                </div>
                                <div class="d-flex flex-column align-content-end">
                                    <p class="mb-1 status text-dark">Order Status: 
                                        <% if (order.status === 'Delivered') { %>
                                            <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">Delivered</span>
                                        <% } else if (order.status === 'Pending') { %>
                                            <i class="bi bi-clock text-warning"></i> <span class="text-warning">Pending</span>
                                        <% } else if (order.status === 'Canceled') { %>
                                            <i class="bi bi-x-circle-fill text-danger"></i> <span class="text-danger">Canceled</span>
                                        <% } else if (order.status === 'Returned') { %>
                                            <i class="bi bi-check-circle-fill text-success"></i> <span class="text-success">Returned</span>
                                        <% } else { %>
                                            <i class="bi bi-arrow-repeat"></i> <span class="text-primary"><%= order.status %></span>
                                        <% } %>
                                    </p>
                                    <p class="mb-1"><strong>Payment:</strong> 
                                        <% if (order.paymentMethod === 'razorpay'  && order.paymentStatus === 'Refunded') { %>
                                        <% }else if (order.paymentMethod === 'wallet'  && order.paymentStatus === 'Refunded') { %>
                                        <% } else { %>
                                            <%= order.paymentMethod %> 
                                        <% } %>
                                        
                                        <span class="badge bg-<%= (order.paymentStatus === 'Completed' ? 'success' : (order.paymentStatus === 'Refunded' ? 'primary' : 'danger')) %>">
                                            <% if (order.paymentStatus === 'Failed' && order.paymentMethod === 'cod') { %>
                                            <% if (order.paymentMethod === 'razorpay' && order.paymentStatus === 'Refunded') { %> to Wallet <%  %>
                                            <% }else if (order.paymentMethod === 'wallet' && order.paymentStatus === 'Refunded') { %> to Wallet <% } %>
                                            <% } else { %>
                                            <%= order.paymentStatus %>
                                            <% } %>
                                        </span>
                                    </p>
                                </div>
                                <div class="order-actions d-flex">
                                    <% if (order.paymentStatus === 'Pending' && order.paymentMethod === 'razorpay') { %>
                                        <button id="pay-order-<%= order.orderId %>" 
                                                class="btn btn-sm btn-paynow me-1" 
                                                onclick="payNow('<%= order.orderId %>')">
                                            <i class="bi bi-credit-card"></i> Pay Now
                                        </button>
                                    <% } %>
                                    <!-- receipt button -->
                                    <button class="btn btn-sm btn-view me-1" 
                                            onclick="location.href='/<%= order.orderId %>'">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    <button class="btn btn-sm btn-view me-1" 
                                            onclick="location.href='/<%= order.orderId %>'">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    <% if (order.status === 'Delivered') { %>
                                        <button id="return-order-<%= order.orderId %>" 
                                                class="btn btn-sm btn-warning me-1" 
                                                onclick="requestReturn('<%= order.orderId %>')">
                                            <i class="bi bi-arrow-repeat"></i>
                                        </button>
                                    <% } else if (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped') { %>
                                        <button id="cancel-order-<%= order.orderId %>" 
                                                class="btn btn-sm btn-danger" 
                                                onclick="cancelOrder('<%= order.orderId %>')">
                                            <i class="bi bi-x-circle-fill"></i> Cancel
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <p>No orders found.</p>
                    <% } %>
                </div>
                
        
                <!-- Wishlist Section -->
                <div class="tab-pane fade" id="wishlist">
                    <h3 class="mb-4 bg-div fw-bold">My Wishlist</h3>
                    <!-- Wishlist details here -->
                    <ul class="list-group wishlist-container gap-1">
                        <!-- Loop through each product in the wishlist and display it dynamically -->
                        <% if (wishlistProducts && wishlistProducts.length > 0) { %>
                            <% wishlistProducts.reverse().forEach(product => { %>
                            
                            <li id="wishlist-item-<%= product.productId._id %>" class="list-group-item wishlist-item d-flex justify-content-between align-items-center bg-div2 p-1 pe-2 ">
                                <div class="product-image rounded overflow-hidden">
                                    <a href="/productDetail/<%= product.productId._id %>">
                                        <img src="/uploads/product-images/<%= product.productId.productImage[0] %>" alt="Product Image" class="img-fluid" style="width: 80px; height: auto;">
                                    </a>
                                </div>
                                <div class="product-details flex-grow-1 ms-3">
                                    <h5 class="mb-1 fw-bold"><%= product.productId.productName %></h5>
                                    <p class="mb-0 text-muted">Price: ₹ <%= product.productId.salePrice %></p>
                                    <p class="mb-0 text-muted">Stock: <%= product.productId.quantity %> available</p>
                                </div>
                                <div class="d-flex gap-2">
                                    <a onclick="addToCart('<%= product.productId._id %>')" class="btn btn-primary"><i class="bi bi-cart-plus"></i> Add to Cart</a>
                                    <a onclick="toggleWishlist('<%= product.productId._id %>')" class="btn btn-danger"><i class="bi bi-trash"></i> Remove</a>
                                </div>
                            </li>
                            <% }) %>
                        <% } else { %>
                            <p>No products found in the wishlist.</p>
                        <% } %>
                    </ul>
                </div>
        
                <!-- Wallet Section -->
                <div class="tab-pane fade" id="wallet">
                    
                    <!-- Wallet details here -->
                    
                    <div class="wallet-summary mb-3 bg-div d-flex justify-content-between align-items-center">
                        <h3 class=" ">My Wallet</h3>
                        <div class="d-flex justify-content-start gap-2 bg-div">
                            <h5 class="fw-bold" style="color: #044626;">Total Balance:</h5>
                            <h4 class="balance-amount text-white fw-bold">₹ 
                                <%= wallet && wallet.balance ? wallet.balance.toFixed(2) : '0.00' %>
                            </h4>
                        </div>
                    </div>
                
                    <div class="transaction-history">
                        <h5 class="section-title">Recent Transactions</h5>
                        <ul class="list-group gap-1">
                            <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                                <% wallet.transactions.slice(-5).reverse().forEach(transaction => { %>
                                    <li class="list-group-item d-flex justify-content-between bg-div2 align-items-center ">
                                        <div>
                                            <span class="transaction-title"><%= transaction.description || 'Transaction' %></span><br>
                                            <small class="text-muted">
                                                <%= new Date(transaction.date).toLocaleDateString('en-GB', {
                                                    day: 'numeric', month: 'short', year: 'numeric'
                                                }) %>
                                            </small>
                                            <span class="badge rounded-pill <%= transaction.type === 'Credit' ? 'bg-success' : 'bg-danger' %> text-white">
                                                <%= transaction.type %>
                                            </span>
                                            
                                        </div>
                                        <span class="amount fw-bold <%= transaction.type === 'Credit' ? 'positive' : 'negative' %>">
                                            <%= transaction.type === 'Credit' ? '+' : '-' %> ₹ <%= transaction.amount.toFixed(2) %>
                                        </span>
                                    </li>
                                <% }); %>
                            <% } else { %>
                                <li class="list-group-item">No transactions yet.</li>
                            <% } %>
                        </ul>
                    </div>
                </div>
                
                
        
                <!-- Address Section -->
                <div class="tab-pane fade" id="address">
                    <!-- Address details here -->
                    <div class="address-card mb-3 d-flex justify-content-between align-items-center">
                        <h5 class="mb-1"><strong>Manage Addresses</strong></h5><a class="btn btn-success btn-sm sidebar-link" data-bs-toggle="tab" href="#addAddress"><i class="bi bi-plus"></i>Address</a>
                    </div>
                    <% if (userAddress && userAddress.address) { %>
                        <% userAddress.address.filter(address => !address.isDeleted).reverse().forEach(address => { %> <!-- Filter out deleted addresses -->
                            <div class="address-card mb-3">
                                <div class="d-flex justify-content-between">
                                    <div class="text-success d-flex flex-column mb-0">
                                        <h5 class="fw-bold "><strong><%= address.name %></strong></h5>
                                        <p class="mb-0"> City: <%= address.city %></p>
                                        <p class="mb-0"> State: <%= address.state %></p>
                                        <p class="mb-0"> Landmark: <%= address.landMark %></p>
                                        <p class="mb-1"> Pincode: <%= address.pincode %></p>
                                        <p class="mb-0 fw-bold" style="font-size: 0.7rem"> Phone: <%= address.phone %></p>
                                        <p class="mb-0 fw-bold" style="font-size: 0.7rem"> Alt Phone: <%= address.altPhone %></p>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <a class="btn btn-outline-success btn-sm me-2 shadow-sm" href="/address?id=<%= address._id %>"><i class="bi bi-pencil"></i> Edit</a>
                                        <a class="btn btn-outline-danger btn-sm shadow-sm" onclick="deleteAddress('<%= address._id %>')"><i class="bi bi-trash"></i> Delete</a>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="address-card mb-3">
                            <div class="d-flex justify-content-between">
                                <div class="text-muted">
                                    <em>No Address Available</em>
                                </div>
                            </div>
                        </div> 
                    <% } %>
                </div>
                

                <div class="tab-pane fade" id="addAddress">
                    <div class="address-card mb-3 d-flex justify-content-between align-items-center">
                        <h5 class="mb-1"><strong>Add Address</strong></h5><button type="button" class="btn btn-danger btn-sm sidebar-link" data-bs-toggle="tab" href="#address"><i class="bi bi-x"></i></button>
                    </div>
                    <!-- Address input form here -->
                    <div class="address-card mb-3">
                        
                        <form id="addAddressForm">
                            <div class="mb-3">
                                <label for="addressType" class="form-label">Address Type</label>
                                <input type="text" id="addressType" class="form-control" placeholder="Home/Office" name="addressType" required>
                            </div>
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" id="name" class="form-control" placeholder="Full Name" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="city" class="form-label">City</label>
                                <input type="text" id="city" class="form-control" placeholder="City" name="city" required>
                            </div>
                            <div class="mb-3">
                                <label for="landmark" class="form-label">Landmark</label>
                                <input type="text" id="landmark" class="form-control" placeholder="Landmark" name="landmark">
                            </div>
                            <div class="mb-3">
                                <label for="state" class="form-label">State</label>
                                <input type="text" id="state" class="form-control" placeholder="State" name="state" required>
                            </div>
                            <div class="mb-3">
                                <label for="pincode" class="form-label">Pincode</label>
                                <input type="number" id="pincode" class="form-control" placeholder="Pincode" name="pincode" required>
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone</label>
                                <input type="number" id="phone" class="form-control" placeholder="Phone" name="phone" required>
                            </div>
                            <div class="mb-3">
                                <label for="altPhone" class="form-label">Alternate Phone</label>
                                <input type="number" id="altPhone" class="form-control" placeholder="Alternate Phone" name="altPhone">
                            </div>
                            <button type="submit" class="btn btn-success">Submit</button>
                        </form>
                    </div>
                </div>
                <div class="tab-pane fade" id="editAddress">
                    <!-- Address input form here -->
                    <div class="address-card mb-3">
                        <h5 class="mb-4"><strong>Edit Address</strong></h5>
                        <form id="addAddressForm">
                            <div class="mb-3">
                                <label for="addressType" class="form-label">Address Type</label>
                                <input type="text" id="addressType" class="form-control" placeholder="Home/Office" name="addressType" required>
                            </div>
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" id="name" class="form-control" placeholder="Full Name" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="city" class="form-label">City</label>
                                <input type="text" id="city" class="form-control" placeholder="City" name="city" required>
                            </div>
                            <div class="mb-3">
                                <label for="landmark" class="form-label">Landmark</label>
                                <input type="text" id="landmark" class="form-control" placeholder="Landmark" name="landmark">
                            </div>
                            <div class="mb-3">
                                <label for="state" class="form-label">State</label>
                                <input type="text" id="state" class="form-control" placeholder="State" name="state" required>
                            </div>
                            <div class="mb-3">
                                <label for="pincode" class="form-label">Pincode</label>
                                <input type="number" id="pincode" class="form-control" placeholder="Pincode" name="pincode" required>
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone</label>
                                <input type="text" id="phone" class="form-control" placeholder="Phone" name="phone" required>
                            </div>
                            <div class="mb-3">
                                <label for="altPhone" class="form-label">Alternate Phone</label>
                                <input type="text" id="altPhone" class="form-control" placeholder="Alternate Phone" name="altPhone">
                            </div>
                            <button type="submit" class="btn btn-success">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Email Verification Modal -->
    <div class="modal fade" id="verifyEmailModal" tabindex="-1" aria-labelledby="verifyEmailModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyEmailModalLabel">Verify Email</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="verifyEmailForm" >
                        <div class="mb-3">
                            <label for="currentEmail" class="form-label">Current Email</label>
                            <input type="email" id="currentEmail" class="form-control" value="<%= userData.email %>" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="otp" class="form-label">Enter OTP</label>
                            <input type="text" id="otp" class="form-control" placeholder="Enter OTP sent to your email">
                        </div>
                        <div class="mb-3 d-flex justify-content-between">
                            <a  type="button" class="btn btn-primary" id="sendOtpBtn">Send OTP</a>
                            <button type="submit" class="btn btn-success">Verify</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    

    <script>

        const deleteAddress = async (addressId) => {
        try {
            const result = await Swal.fire({
                title: 'Delete Address?',
                text: 'Are you sure you want to delete this address?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Delete'
            });

            if (result.isConfirmed) {
                const response = await fetch(`/address/${addressId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                });

                if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to delete address');
                }

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: 'Address deleted successfully!',
                    showConfirmButton: false,
                    timer: 2000
                    }).then(() => {
                        location.href = '/profile';
                    })
                }else{
                    Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Failed to delete address',
                    showConfirmButton: false,
                    timer: 2000
                    })
                }
            }
        } catch (error) {
            console.error('Error deleting address:', error);
            Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Failed to delete address',
            showConfirmButton: false,
            timer: 2000
            })
        }
        };

        const addressForm = document.getElementById('addAddressForm');
        const addressType = document.getElementById('addressType');
        const name = document.getElementById('name');
        const city = document.getElementById('city');
        const landMark = document.getElementById('landmark');
        const state = document.getElementById('state');
        const pincode = document.getElementById('pincode');
        const phone = document.getElementById('phone');
        const altPhone = document.getElementById('altPhone');

        addressForm.addEventListener('submit', function (event) {
            event.preventDefault();
            console.log(validateForm());
            
            if (validateForm()) {
                event.preventDefault();
                fetch('/address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        addressType: addressType.value,
                        name: name.value,
                        city: city.value,
                        landMark: landMark.value,
                        state: state.value,
                        pincode: pincode.value,
                        phone: phone.value,
                        altPhone: altPhone.value
                    })
                }).then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Address Added Successfully',
                            showConfirmButton: false,
                            timer: 2000
                        })
                        .then(() => {
                            window.location.href = '/profile';
                        })
                    }else{
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        })
                    }
                })
                .catch(error => {
                    console.log(error.message, 'blocking problem');
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'An error occurred',
                        text: error.message,
                        showConfirmButton: false,
                        timer: 2000
                    });
                });
                
            }

        });

        function validateForm() {
            return true;
        }

        async function toggleWishlist(productId) {
    console.log(`Toggling wishlist for product ID: ${productId}`);
    try {
        const response = await fetch('/toggleWishlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
            }),
        });

        const data = await response.json();
        if (data.success) {
            
            

            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: data.message,
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
            })
            
            .then(() => {
                window.location.reload()
            })
        } else {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: data.message,
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
            });
        }
    } catch (error) {
        console.error('Error:', error.message);

        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Error updating wishlist. Please try again later.',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true,
        });
    }
}


        async function addToCart(productId) {
            console.log(productId,'productID');
            
            const quantity = 1; // You can replace this with a dynamic quantity if needed

            try {
                const response = await fetch('/cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productId,
                        quantity: quantity,
                    }),
                });

                const data = await response.json();
                console.log(data);
                
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: data.success ? 'success' : 'error',
                    title: data.message,
                    showConfirmButton: false,
                    timer: 2000
                });

            } catch (error) {
                console.log(error.message, 'cart adding problem');
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        }



        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.addEventListener('click', function () {
                const target = this.getAttribute('href');
                document.querySelectorAll('.tab-pane').forEach(tab => tab.classList.remove('show', 'active'));
                document.querySelector(target).classList.add('show', 'active');

                // Remove active class from all links
                document.querySelectorAll('.sidebar-link').forEach(l => l.classList.remove('active'));
                // Add active class to the clicked link
                this.classList.add('active');
            });
        });
      
        // JavaScript to handle sending OTP
        document.getElementById('sendOtpBtn').addEventListener('click', function () {
            const email = document.getElementById('currentEmail').value;
            console.log('sendotp',email);
            
            // Simulate sending OTP
            fetch('/profile/verify-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            })
            .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        })
                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'OTP Verification Failed',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                })
                .catch(error => {
                    console.log(error.message, 'blocking problem');
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'An error occurred',
                        text: error.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                });
        });

        // Handle form submission and OTP verification
        document.getElementById('verifyEmailForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const otp = parseInt(document.getElementById('otp').value);
            console.log('otp',typeof otp,otp);
            
            // Simulate OTP verification
            fetch('/profile/email-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ otp })
            })
            .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        // OTP verification successful
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            background: '#fff',
                            icon: 'success',
                            title: '<span style="font-size: 1.5rem; color: #20c997"><i class="fas fa-check-circle"></i></span> ' + data.message,
                            showConfirmButton: false,
                            timer: 2000,
                            animation: false,
                            customClass: {
                                popup: 'animated fadeInDown faster'
                            }
                        })
                        .then(() => {
                        window.location.href = '/profile/reset-password';
                        });
                    } else {
                        // OTP verification failed
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'OTP Verification Failed',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
            })
            .catch(error => {
                console.log(error.message, 'blocking problem');
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'An error occurred',
                    text: error.message,
                    showConfirmButton: false,
                    timer: 1500
                });
            });
        });



    function requestReturn(orderId) {
        // Show SweetAlert for return reason
        Swal.fire({
            title: 'Return Reason',
            input: 'textarea',
            inputLabel: 'Please enter the reason for returning the order',
            inputPlaceholder: 'Write your reason here...',
            showCancelButton: true,
            confirmButtonText: 'Send',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
                if (!value) {
                    return 'You must provide a reason!';
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const reason = result.value;

                // Call the backend to update the order status to 'Return Request'
                fetch(`/order/${orderId}/request-return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ reason: reason })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Change the "Return" button to "Requested" on the frontend
                        const returnButton = document.getElementById(`return-order-${orderId}`);
                        returnButton.textContent = 'Requested';
                        returnButton.classList.remove('btn-warning');
                        returnButton.classList.add('btn-secondary');
                        returnButton.disabled = true;
                    } else {
                        Swal.fire('Error', 'There was an error processing your return request.', 'error');
                    }
                })
                .catch(err => {
                    console.log(err);
                    Swal.fire('Error', 'There was an error processing your return request.', 'error');
                });
            }
        });
    }

    async function payNow(orderId) {
        try {
            const response = await fetch(`/order/retry-payment`, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json'
                 },
                 body: JSON.stringify({ orderId })
             });

            const data = await response.json();
            if (data.success) {

                if(data.method === 'razorpay' && data.razorpayOrderId){

                    const razorpayOrderId = data.razorpayOrderId;
                    console.log(razorpayOrderId,'razorpayOrderId',data.amount,data.orderId);
                    
                    const options = {
                        key: "rzp_test_Q8Waie1ecHFvXQ",
                        amount: data.amount * 100, // Amount in paise
                        currency: "INR",
                        name: "Deco Havan store",
                        description: "Order Payment",
                        order_id: razorpayOrderId,
                        handler: async function (response) {
                            console.log('Payment response:', response);

                            const confirmResponse = await fetch('/order/confirm-order', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpayOrderId: response.razorpay_order_id,
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpaySignature: response.razorpay_signature,
                                    paymentMethod:data.method,
                                    orderId:data.orderId
                                })
                            });

                            const result = await confirmResponse.json();

                            console.log(result);

                            if (result.success) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: result.message,
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                                .then(() => {
                                    window.location.href = `/order/${result.orderId}/confirmation`;
                                })
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: result.message,
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                                .then(() => {
                                    window.location.href = `/order/${result.orderId}/confirmation`;
                                })
                            }
                        }
                    };

                    const razorpay = new Razorpay(options);
                    razorpay.on("payment.failed", function (response) {
                        console.error("Payment failed:", response);
                        razorpay.close();
                        Swal.fire({
                        icon: "info",
                        title: "Payment Incomplete",
                        text:
                            "The payment could not be completed. The order has been placed but payment was not successful. Please try again.",
                        }).then((result) => {
                        if (result.isConfirmed || result.dismiss === Swal.DismissReason.close) {
                            window.location.href = "/profile";
                        }
                        });
                    });

                    razorpay.open()
                    console.log('razorpay opened')
                    
                        
                    

                    
                }else{
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'success',
                        title: data.message,
                        showConfirmButton: false,
                        timer: 2000
                    })
                    // .then(() => {
                    //     window.location.href = '/';
                    // })
                }


                } else {
                console.log(orderData.message);

                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: orderData.message,
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        } catch (error) {
            console.log(error.message, 'blocking problem');
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: 'An error occurred',
                text: error.message,
                showConfirmButton: false,
                timer: 1500
            });
            
        }
    }

    // Function to handle order cancellation
    // Function to handle order cancellation
    async function cancelOrder(orderId) {
        const swalConfirm = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel!',
        });

        if (swalConfirm.isConfirmed) {
            try {
                const response = await fetch(`/order/${orderId}/cancel`, { method: 'PUT' });

                const data = await response.json();
                if (data.success) {
                    // Disable the Cancel Order button and change its appearance
                    const cancelButton = document.getElementById(`cancel-order-${orderId}`);
                    if (cancelButton) {
                        cancelButton.disabled = true;  // Disable the button
                        cancelButton.innerHTML = '<i class="bi bi-check-circle-fill"></i> Canceled';  // Change button text
                        cancelButton.classList.remove('btn-danger');
                        cancelButton.classList.add('btn-secondary');  // Optionally change the button color
                    }

                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'success',
                        title: data.message,
                        showConfirmButton: false,
                        timer: 2000
                    });
                
                    
                } else {
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: data.message,
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            } catch (error) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'An error occurred',
                    text: error.message,
                    showConfirmButton: false,
                    timer: 1500
                })
                console.log(error.message, 'cancel order error');
            }
        }
    }
        
    </script>

<%-include("../../views/partials/user/footer")%>