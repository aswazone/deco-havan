<%-include("../../views/partials/user/header")%>
    <title>Responsive User Profile</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            height: 100vh;
            background: linear-gradient(1deg, #3a6655, #9bb5ab, #3b5d50);
            font-family: 'Poppins', sans-serif;
        }
    
        .sidebar {
            background-color: #fff09417;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 20px;
            max-width: 250px;
        }
    
        .sidebar a {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px 15px;
            color: #333;
            font-size: 18px;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
    
        .sidebar a:hover, .sidebar a.active {
            background-color: #3b5d50;
            color: #d7ffd7a9;
        }
    
        .sidebar-icon {
            font-size: 24px;
        }
    
        .sidebar-text {
            display: inline-block;
        }
    
        @media (max-width: 768px) {
            .sidebar {
                max-width: 60px;
                padding: 10px;
            }
    
            .sidebar a {
                justify-content: center;
                padding: 10px;
            }
    
            .sidebar-text {
                display: none;
            }
    
            .sidebar-icon {
                font-size: 28px;
            }
        }
    
        .main-content {
            flex-grow: 1;
            background-color: #7ccfb930;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    
        .profile-image-container {
            width: 100px;
            height: 100px;
            position: relative;
            margin: auto;
        }
    
        .profile-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
            border: 3px solid #d7ffd753;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    
        .form-label {
            font-weight: bold;
            color: #333;
        }
    
        .form-control {
            border: 1px solid #dfffe79c !important;
            background-color: #e2ffe94f !important;
            border-radius: 8px;
            padding: 10px;
        }
    
        .btn-primary {
            background-color: #ff609e;
            border: none;
            transition: background-color 0.3s ease;
        }
    
        .btn-primary:hover {
            background-color: #d95886;
        }
    
        @media (max-width: 768px) {
            .main-content {
                padding: 10px;
            }
    
            .profile-image-container {
                width: 80px;
                height: 80px;
            }
    
            .form-label {
                font-size: 14px;
            }
    
            .form-control {
                font-size: 14px;
                padding: 8px;
            }
    
            .btn-primary {
                font-size: 14px;
                padding: 8px 12px;
            }

            .sidebar {
        display: none;
    }
    .mobile-sidebar {
        display: flex;
        position: sticky;
        bottom: 0;
        background-color: #f8f9fa;
        padding: 10px;
        box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }
    .mobile-sidebar a {
        flex: 1;
        text-align: center;
        font-size: 1.2rem;
        color: #6c757d;
    }
    .mobile-sidebar a.active {
        color: #0d6efd;
    }
        }
    </style>
    <body>
        <div class="main-content d-flex gap-3 m-4 flex-column flex-md-row">
            <!-- Sidebar -->
            <aside class="sidebar d-flex flex-column gap-2">
                <h4 class="text-center mb-4 d-none d-md-block">My Account</h4>
                <div class="mobile-sidebar d-md-none d-flex justify-content-around gap-2 mb-3">
                    <a class="sidebar-link profile active" data-bs-toggle="tab" href="#profile">
                        <i class="bi bi-person-circle"></i>
                    </a>
                    <a class="sidebar-link" data-bs-toggle="tab" href="#orders">
                        <i class="bi bi-cart"></i>
                    </a>
                    <a class="sidebar-link wishlist" data-bs-toggle="tab" href="#wishlist">
                        <i class="bi bi-heart"></i>
                    </a>
                    <a class="sidebar-link" data-bs-toggle="tab" href="#wallet">
                        <i class="bi bi-wallet2"></i>
                    </a>
                    <a class="sidebar-link" data-bs-toggle="tab" href="#address">
                        <i class="bi bi-geo-alt"></i>
                    </a>
                </div>
                <a class="sidebar-link profile active d-none d-md-flex" data-bs-toggle="tab" href="#profile">
                    <i class="bi bi-person-circle"></i> Profile
                </a>
                <a class="sidebar-link d-none d-md-flex" data-bs-toggle="tab" href="#orders">
                    <i class="bi bi-cart"></i> Orders
                </a>
                <a class="sidebar-link wishlist d-none d-md-flex" data-bs-toggle="tab" href="#wishlist">
                    <i class="bi bi-heart"></i> Wishlist
                </a>
                <a class="sidebar-link d-none d-md-flex" data-bs-toggle="tab" href="#wallet">
                    <i class="bi bi-wallet2"></i> Wallet
                </a>
                <a class="sidebar-link d-none d-md-flex" data-bs-toggle="tab" href="#address">
                    <i class="bi bi-geo-alt"></i> Address
                </a>
            </aside>
        
    
            <!-- Main Content with Tabs -->
            <div class="main-content">
                <div class="tab-content">
                    <!-- Profile Section -->
                    <div class="tab-pane fade show active" id="profile">
                        <h3 class="mb-2 bg-div">Profile Details</h3>
                        <div class="row align-items-center mb-4">
                            <div class="col-12 col-md-4 text-center mb-3 mb-md-0">
                                <div class="profile-image-container">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/9/93/Google_Contacts_icon.svg" alt="User Profile" class="profile-image">
                                </div>
                            </div>
                            <div class="col-12 col-md-8">
                                <form id="userDetailsForm">
                                    <div class="mb-3">
                                        <label for="username" class="form-label">Username</label>
                                        <input type="text" id="username" class="form-control" value="<%= userData.name %>" readonly>
                                    </div>
                                    <div class="mb-3">
                                        <label for="email" class="form-label">Email</label>
                                        <input type="email" id="email" class="form-control" value="<%= userData.email %>" readonly>
                                    </div>
                                    <div class="mb-3">
                                        <label for="phone" class="form-label">Phone Number</label>
                                        <input type="tel" id="phone" class="form-control" value="+91 <%= userData.phone %>" readonly>
                                    </div>
                                    <div class="mb-3">
                                        <a class="btn btn-primary" type="button" id="changeEmailBtn" data-bs-toggle="modal" data-bs-target="#verifyEmailModal">Change Password</a>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
    


    
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    

    <script>

        const deleteAddress = async (addressId) => {
        try {
            const response = await fetch(`/address/${addressId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            });

            if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'Failed to delete address');
            }

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Address deleted successfully!',
                showConfirmButton: false,
                timer: 2000
                }).then(() => {
                    location.href = '/profile';
                })
            }else{
                Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: 'Failed to delete address',
                showConfirmButton: false,
                timer: 2000
                })
            }
        } catch (error) {
            console.error('Error deleting address:', error);
            Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Failed to delete address',
            showConfirmButton: false,
            timer: 2000
            })
        }
        };

        const addressForm = document.getElementById('addAddressForm');
        const addressType = document.getElementById('addressType');
        const name = document.getElementById('name');
        const city = document.getElementById('city');
        const landMark = document.getElementById('landmark');
        const state = document.getElementById('state');
        const pincode = document.getElementById('pincode');
        const phone = document.getElementById('phone');
        const altPhone = document.getElementById('altPhone');

        addressForm.addEventListener('submit', function (event) {
            event.preventDefault();
            console.log(validateForm());
            
            if (validateForm()) {
                event.preventDefault();
                fetch('/address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        addressType: addressType.value,
                        name: name.value,
                        city: city.value,
                        landMark: landMark.value,
                        state: state.value,
                        pincode: pincode.value,
                        phone: phone.value,
                        altPhone: altPhone.value
                    })
                }).then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Address Added Successfully',
                            showConfirmButton: false,
                            timer: 2000
                        })
                        .then(() => {
                            window.location.href = '/profile';
                        })
                    }else{
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        })
                    }
                })
                .catch(error => {
                    console.log(error.message, 'blocking problem');
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'An error occurred',
                        text: error.message,
                        showConfirmButton: false,
                        timer: 2000
                    });
                });
                
            }

        });

        function validateForm() {
            return true;
        }

        async function toggleWishlist(productId) {
    console.log(`Toggling wishlist for product ID: ${productId}`);
    try {
        const response = await fetch('/toggleWishlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
            }),
        });

        const data = await response.json();
        if (data.success) {
            
            

            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: data.message,
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
            })
            
            .then(() => {
                window.location.reload()
            })
        } else {
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: data.message,
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
            });
        }
    } catch (error) {
        console.error('Error:', error.message);

        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Error updating wishlist. Please try again later.',
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true,
        });
    }
}


        async function addToCart(productId) {
            console.log(productId,'productID');
            
            const quantity = 1; // You can replace this with a dynamic quantity if needed

            try {
                const response = await fetch('/cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productId,
                        quantity: quantity,
                    }),
                });

                const data = await response.json();
                console.log(data);
                
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: data.success ? 'success' : 'error',
                    title: data.message,
                    showConfirmButton: false,
                    timer: 2000
                });

            } catch (error) {
                console.log(error.message, 'cart adding problem');
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        }



        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.addEventListener('click', function () {
                const target = this.getAttribute('href');
                document.querySelectorAll('.tab-pane').forEach(tab => tab.classList.remove('show', 'active'));
                document.querySelector(target).classList.add('show', 'active');

                // Remove active class from all links
                document.querySelectorAll('.sidebar-link').forEach(l => l.classList.remove('active'));
                // Add active class to the clicked link
                this.classList.add('active');
            });
        });
      
        // JavaScript to handle sending OTP
        document.getElementById('sendOtpBtn').addEventListener('click', function () {
            const email = document.getElementById('currentEmail').value;
            console.log('sendotp',email);
            
            // Simulate sending OTP
            fetch('/profile/verify-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            })
            .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        })
                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'OTP Verification Failed',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                })
                .catch(error => {
                    console.log(error.message, 'blocking problem');
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'An error occurred',
                        text: error.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                });
        });

        // Handle form submission and OTP verification
        document.getElementById('verifyEmailForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const otp = parseInt(document.getElementById('otp').value);
            console.log('otp',typeof otp,otp);
            
            // Simulate OTP verification
            fetch('/profile/email-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ otp })
            })
            .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if(data.success){
                        // OTP verification successful
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            background: '#fff',
                            icon: 'success',
                            title: '<span style="font-size: 1.5rem; color: #20c997"><i class="fas fa-check-circle"></i></span> ' + data.message,
                            showConfirmButton: false,
                            timer: 2000,
                            animation: false,
                            customClass: {
                                popup: 'animated fadeInDown faster'
                            }
                        })
                        .then(() => {
                        window.location.href = '/profile/reset-password';
                        });
                    } else {
                        // OTP verification failed
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'OTP Verification Failed',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
            })
            .catch(error => {
                console.log(error.message, 'blocking problem');
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'An error occurred',
                    text: error.message,
                    showConfirmButton: false,
                    timer: 1500
                });
            });
        });



    function requestReturn(orderId) {
        // Show SweetAlert for return reason
        Swal.fire({
            title: 'Return Reason',
            input: 'textarea',
            inputLabel: 'Please enter the reason for returning the order',
            inputPlaceholder: 'Write your reason here...',
            showCancelButton: true,
            confirmButtonText: 'Send',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
                if (!value) {
                    return 'You must provide a reason!';
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                const reason = result.value;

                // Call the backend to update the order status to 'Return Request'
                fetch(`/order/${orderId}/request-return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ reason: reason })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Change the "Return" button to "Requested" on the frontend
                        const returnButton = document.getElementById(`return-order-${orderId}`);
                        returnButton.textContent = 'Requested';
                        returnButton.classList.remove('btn-warning');
                        returnButton.classList.add('btn-secondary');
                        returnButton.disabled = true;
                    } else {
                        Swal.fire('Error', 'There was an error processing your return request.', 'error');
                    }
                })
                .catch(err => {
                    console.log(err);
                    Swal.fire('Error', 'There was an error processing your return request.', 'error');
                });
            }
        });
    }

    async function payNow(orderId) {
        try {
            const response = await fetch(`/order/retry-payment`, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json'
                 },
                 body: JSON.stringify({ orderId })
             });

            const data = await response.json();
            if (data.success) {

                if(data.method === 'razorpay' && data.razorpayOrderId){

                    const razorpayOrderId = data.razorpayOrderId;
                    console.log(razorpayOrderId,'razorpayOrderId',data.amount,data.orderId);
                    
                    const options = {
                        key: "rzp_test_Q8Waie1ecHFvXQ",
                        amount: data.amount * 100, // Amount in paise
                        currency: "INR",
                        name: "Deco Havan store",
                        description: "Order Payment",
                        order_id: razorpayOrderId,
                        handler: async function (response) {
                            console.log('Payment response:', response);

                            const confirmResponse = await fetch('/order/confirm-order', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpayOrderId: response.razorpay_order_id,
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpaySignature: response.razorpay_signature,
                                    paymentMethod:data.method,
                                    orderId:data.orderId
                                })
                            });

                            const result = await confirmResponse.json();

                            console.log(result);

                            if (result.success) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: result.message,
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                                .then(() => {
                                    window.location.href = `/order/confirmation/${result.orderId}`;
                                })
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: result.message,
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                                .then(() => {
                                    window.location.href = `/order/confirmation/${result.orderId}`;
                                })
                            }
                        }
                    };

                    const razorpay = new Razorpay(options);
                    razorpay.on("payment.failed", function (response) {
                        console.error("Payment failed:", response);
                        razorpay.close();
                        Swal.fire({
                        icon: "info",
                        title: "Payment Incomplete",
                        text:
                            "The payment could not be completed. The order has been placed but payment was not successful. Please try again.",
                        }).then((result) => {
                        if (result.isConfirmed || result.dismiss === Swal.DismissReason.close) {
                            window.location.href = "/profile";
                        }
                        });
                    });

                    razorpay.open()
                    console.log('razorpay opened')
                    
                        
                    

                    
                }else{
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'success',
                        title: data.message,
                        showConfirmButton: false,
                        timer: 2000
                    })
                    // .then(() => {
                    //     window.location.href = '/';
                    // })
                }


                } else {
                console.log(orderData.message);

                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: orderData.message,
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        } catch (error) {
            console.log(error.message, 'blocking problem');
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: 'An error occurred',
                text: error.message,
                showConfirmButton: false,
                timer: 1500
            });
            
        }
    }

    // Function to handle order cancellation
    // Function to handle order cancellation
    async function cancelOrder(orderId) {
        try {
            const response = await fetch(`/order/${orderId}/cancel`, { method: 'PUT' });

            const data = await response.json();
            if (data.success) {
                // Disable the Cancel Order button and change its appearance
                const cancelButton = document.getElementById(`cancel-order-${orderId}`);
                if (cancelButton) {
                    cancelButton.disabled = true;  // Disable the button
                    cancelButton.innerHTML = '<i class="bi bi-check-circle-fill"></i> Canceled';  // Change button text
                    cancelButton.classList.remove('btn-danger');
                    cancelButton.classList.add('btn-secondary');  // Optionally change the button color
                }

                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: data.message,
                    showConfirmButton: false,
                    timer: 2000
                });
                
                
            } else {
                alert(data.message);
            }
        } catch (error) {
            alert('Error canceling order. Please try again later.');
            console.log(error.message, 'cancel order error');
        }
    }
        
    </script>

<%-include("../../views/partials/user/footer")%>